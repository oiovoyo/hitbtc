package hitbtc

import (
	"github.com/google/go-querystring/query"
)

type CancelOrder struct {
	ClientOrderId              string `url:"clientOrderId"`              //Yes  string 	Order ID, the same as in cancelling order, from 8 to 32 characters
	CancelRequestClientOrderId string `url:"cancelRequestClientOrderId"` //No 	string 	Unqiue ID generated by client, from 8 to 32 characters
	Symbol                     string `url:"symbol"`                     //No 	string 	Currency symbol, the same as in cancelling order
	Side                       Side   `url:"side"`                       //No 	buy or sell 	Side of a trade, the same as in cancelling order
}

type CancelOrders struct {
	Symbol string `url:"symbol"` //No 	string 	Currency symbol, the same as in cancelling order
	Side   Side   `url:"side"`   //No 	buy or sell 	Side of a trade, the same as in cancelling order
}

/*
{"CancelReject":{"clientOrderId":"giwSASrcCGVoGcuTaLzoPGAzcssEWeRs",
"cancelRequestClientOrderId":"0cdcca37ff320b9385f88199a3823019",
"rejectReasonCode":"orderNotFound"}}*/
type CancelOrderRejected struct {
	CancelReject struct {
		ClientOrderId              string `json:"clientOrderId"`
		CancelRequestClientOrderId string `json:"cancelRequestClientOrderId"`
		RejectReasonCode           string `json:"rejectReasonCode"`
	} `json:"CancelReject"`
}
type CancelOrderResponse struct {
}

func (t *CancelOrder) String() string {
	v, _ := query.Values(t)
	if t.CancelRequestClientOrderId == "" {
		v.Del("cancelRequestClientOrderId")
	}
	if t.Symbol == "" {
		v.Del("symbol")
	}
	if t.Side == "" {
		v.Del("side")
	}
	return v.Encode()
}

func (t *CancelOrders) String() string {
	v, _ := query.Values(t)
	if t.Symbol == "" {
		v.Del("symbol")
	}
	if t.Side == "" {
		v.Del("Side")
	}
	return v.Encode()
}
func NewCancelOrders(pair string) *CancelOrders {
	return &CancelOrders{
		Symbol: pair,
	}
}

func NewCancelOrder(clientOrderId string) *CancelOrder {
	return &CancelOrder{
		ClientOrderId: clientOrderId,
	}
}

func NewQueryOrder(clientOrderId string) *CancelOrder {
	return &CancelOrder{
		ClientOrderId: clientOrderId,
	}
}

type oneQueryOrder struct {
	OrderId        int64   `json:"orderId"`
	OrderStatus    string  `json:"orderStatus"`
	LastTimestamp  int64   `json:"lastTimestamp"`
	OrderPrice     float64 `json:"orderPrice,string"`
	OrderQuantity  float64 `json:"orderQuantity"`
	AvgPrice       float64 `json:"avgPrice,string"`
	QuantityLeaves float64 `json:"quantityLeaves"`
	Type           string  `json:"type"`
	TimeInForce    string  `json:"timeInForce"`
	CumQuantity    float64 `json:"cumQuantity"`
	ClientOrderId  string  `json:"clientOrderId"`
	Symbol         string  `json:"symbol"`
	Side           string  `json:"side"`
	ExecQuantity   float64 `json:"execQuantity"`
}

type queryOrders struct {
	Orders []oneQueryOrder `json:"orders"`
}

type OneQueryOrder struct {
	OrderId      string
	Symbol       string
	DealAmount   float64
	RemainAmount float64
	AvgPrice     float64
}

type QueryOrder struct {
	Orders []OneQueryOrder
}
